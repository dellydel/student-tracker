AWSTemplateFormatVersion: 2010-09-09

Parameters:
  Env:
    Type: String
    AllowedValues:
      - development
      - production
    Description: The deployment environment

Conditions:
  IsDev: !Equals 
    - !Ref Env
    - development
Resources:
  RegistrationLambdaFunction:
    DeletionPolicy: Retain
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          const AWS = require('aws-sdk')
          const dbClient = new AWS.DynamoDB.DocumentClient()
          exports.handler = async(event)=>{
            let body;
            let statusCode = 200;
            try{
              body = await dbClient.put(event).promise();
            }catch(err){
              statusCode = err.statusCode;
              body = err.message;
            }
            return{
              statusCode,
              body
            }
          }
      FunctionName: !Sub "registration-lambda-${Env}"
      Handler: index.handler
      Runtime: nodejs14.x
      Role: !GetAtt IAMRole.Arn
    DependsOn:
      - DynamoDBRegistrations
  CoursesLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: deploy.zip
      FunctionName: !Sub "courses-lambda-${Env}"
      Handler: courses.handler
      Runtime: nodejs14.x
      Role: !GetAtt IAMRole.Arn
    DependsOn:
      - DynamoDBCourses
  DynamoDBStudents:
    Type: AWS::DynamoDB::Table
    DeletionPolicy: Retain
    Properties:
      TableName: !Sub "next-byte-Students-${Env}"
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
  DynamoDBCourses:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "next-byte-Courses-${Env}"
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
  DynamoDBRegistrations:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "next-byte-Registrations-${Env}"
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
  DynamoDBTestimonials:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "next-byte-Testimonials-${Env}"
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
  
  APIGatewayRestAPI:
    Type: "AWS::ApiGateway::RestApi"
    Properties:
      Name: !Sub "next-byte-api-${Env}"
      EndpointConfiguration: 
        types: 
          - REGIONAL
  APIGatewayRegistrationResource:
    Type: "AWS::ApiGateway::Resource"
    DeletionPolicy: Retain
    Properties:
      RestApiId: !Ref APIGatewayRestAPI
      ParentId: !GetAtt APIGatewayRestAPI.RootResourceId
      PathPart: registration
    DependsOn:
      - APIGatewayRestAPI
  APIGatewayCoursesResource:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      RestApiId: !Ref APIGatewayRestAPI
      ParentId: !GetAtt APIGatewayRestAPI.RootResourceId
      PathPart: Courses
    DependsOn:
      - APIGatewayRestAPI
  APIGatewayPostMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref APIGatewayRestAPI
      ResourceId: !Ref APIGatewayRegistrationResource
      HttpMethod: POST
      AuthorizationType: NONE
      MethodResponses:
        - StatusCode: "200"
          ResponseModels: { "application/json": "Empty" }
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: "'*'"
      Integration:
        Type: AWS
        IntegrationResponses:
          - StatusCode: "200"
            ResponseTemplates:
              application/json: ""
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        PassthroughBehavior: WHEN_NO_MATCH
        IntegrationHttpMethod: POST
        Uri: !Sub
          - "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaFuncNameArn}/invocations"
          - LambdaFuncNameArn: !GetAtt RegistrationLambdaFunction.Arn
    DependsOn:
      - APIGatewayRegistrationResource
  APIGatewayCoursesGetMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref APIGatewayRestAPI
      ResourceId: !Ref APIGatewayCoursesResource
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub
          - >-
            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaFuncNameArn}/invocations
          - LambdaFuncNameArn: !GetAtt CoursesLambdaFunction.Arn
    DependsOn:
      - APIGatewayCoursesResource
  APIGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId: !Ref APIGatewayRestAPI
      StageName:
        Ref: Env
    DependsOn: [APIGatewayPostMethod, APIGatewayCoursesGetMethod]
  APIGatewayPermissionRegistration:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !Ref RegistrationLambdaFunction
      Principal: apigateway.amazonaws.com
  APIGatewayPermissionCourses:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !Ref CoursesLambdaFunction
      Principal: apigateway.amazonaws.com
  IAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Path: /
      Policies:
        - PolicyName: Policy_api-lambda-db
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - "dynamodb:BatchGetItem"
                  - "dynamodb:BatchWriteItem"
                  - "dynamodb:TagResource"
                  - "dynamodb:UntagResource"
                  - "dynamodb:PutItem"
                  - "dynamodb:DeleteItem"
                  - "dynamodb:GetItem"
                  - "dynamodb:Scan"
                  - "dynamodb:Query"
                  - "dynamodb:UpdateItem"
                Resource: 
                  - !GetAtt DynamoDBStudents.Arn
                  - !GetAtt DynamoDBCourses.Arn
                  - !GetAtt DynamoDBRegistrations.Arn
              - Effect: Allow
                Action:
                  - "logs:CreateLogStream"
                  - "logs:CreateLogGroup"
                  - "logs:PutLogEvents"
                Resource: "*"

  MyS3Bucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties:
      BucketName: !If [IsDev, dev.nextbyteweb.com, www.nextbyteweb.com]
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders:
              - "*"
            AllowedMethods:
              - GET
            AllowedOrigins:
              - "*"
            ExposedHeaders:
              - Date
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: error.html
  MyS3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref MyS3Bucket
      PolicyDocument:
        Statement:
          - Action:
              - s3:*
            Effect: Allow
            Resource:
              - !Sub arn:aws:s3:::${MyS3Bucket}
              - !Sub arn:aws:s3:::${MyS3Bucket}/*
            Principal:
              AWS:
                - "*"

  LambdaS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: nextbyte-lambdas

