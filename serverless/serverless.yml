service: serverless
frameworkVersion: "3"

provider:
  name: aws
  runtime: nodejs16.x
  stackName: serverless-${opt:stage}
  apiGateway:
    restApiId: ${ssm:nextbyte-api-restApiId-${opt:stage}}
    restApiRootResourceId: ${ssm:nextbyte-api-restApiRootResourceId-${opt:stage}}
  iam:
    role: IAMServerlessRole
custom:
    environment: ${file(./config.${opt:stage, 'development'}.json)}
    courses_table: "next-byte-Courses-${opt:stage}"
    registrations_table: "next-byte-Registrations-${opt:stage}"
    nextbyte_url:
      development: "http://dev.nextbyteweb.com"
      production: "https://nextbyteweb.com"

package:
  individually: true
  exclude:
    - ./**
  include:
    - node_modules/**
    - package.json
    - src/http_response.js

functions:
  ping:
    name: ping-lambda-${opt:stage}
    package: 
      include:
        - ping.js
    handler: src/ping.handler
    events:
     - http:
         path: /ping
         method: get
  
  courses-lambda:
    name: courses-lambda-${opt:stage}
    package: 
      include:
        - src/courses.js
    handler: src/courses.handler
    environment:
      COURSES_TABLE: "next-byte-Courses-${opt:stage}"
    events:
     - http:
         path: /courses
         method: get
  
  registration-lambda:
    name: registration-lambda-${opt:stage}
    package: 
      include:
        - src/registration.js
    handler: src/registration.handler
    environment:
      REGISTRATIONS_TABLE: "next-byte-Registrations-${opt:stage}"

    events:
     - http:
         path: /registration
         method: post
         cors: true
  
  payments-lambda:
      name: payments-lambda-${opt:stage}
      package: 
        include:
          - src/payments.js
      handler: src/payments.handler
      environment:  
        NEXTBYTE_URL: ${self:custom.nextbyte_url}.${opt:stage}
      events:
      - http:
          path: /pay
          method: post
          cors: true

  materials-lambda:
      name: materials-lambda-${opt:stage}
      package: 
        include:
          - src/materials.js
      handler: src/materials.handler
      events:
      - http:
          path: /materials
          method: get

resources:
  - Resources:
      IAMServerlessRole:
        Type: AWS::IAM::Role
        Properties:
          AssumeRolePolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Principal:
                  Service:
                    - lambda.amazonaws.com
                Action:
                  - "sts:AssumeRole"
          Policies:
            - PolicyName: Policy_api-lambda-db
              PolicyDocument:
                Version: "2012-10-17"
                Statement:
                  - Effect: Allow
                    Action:
                      - "dynamodb:BatchGetItem"
                      - "dynamodb:BatchWriteItem"
                      - "dynamodb:TagResource"
                      - "dynamodb:UntagResource"
                      - "dynamodb:PutItem"
                      - "dynamodb:DeleteItem"
                      - "dynamodb:GetItem"
                      - "dynamodb:Scan"
                      - "dynamodb:Query"
                      - "dynamodb:UpdateItem"
                    Resource: 
                      - arn:aws:dynamodb:us-east-1:893303684985:table/next-byte-Students-${opt:stage}
                      - arn:aws:dynamodb:us-east-1:893303684985:table/next-byte-Courses-${opt:stage}
                      - arn:aws:dynamodb:us-east-1:893303684985:table/next-byte-Registrations-${opt:stage}
                  - Effect: Allow
                    Action:
                      - "logs:CreateLogStream"
                      - "logs:CreateLogGroup"
                      - "logs:PutLogEvents"
                    Resource: "*"
                  - Effect: Allow
                    Action:
                      -  "s3:GetObject"
                      -  "s3:ListBucket"
                    Resource: 
                      - arn:aws:s3:::nextbyte-course-materials
                      - arn:aws:s3:::nextbyte-course-materials/*
